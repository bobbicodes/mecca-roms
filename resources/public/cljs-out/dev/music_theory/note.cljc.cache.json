["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Number",["^ "],"~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$music-theory.note","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$Note",["^ ","~:num-fields",1,"~:protocols",["^7",["~$cljs.core/IRecord","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^8","~$music-theory.note/Note","~:file","resources/public/cljs-out/dev/music_theory/note.cljc","~:end-column",16,"~:type",true,"~:column",12,"~:internal-ctor",true,"~:line",3,"~:record",true,"~:end-line",3,"~:tag","~$function","~:skip-protocol-flag",["^7",["^B","^C","^D","^E","^F","^G","^H","^I","^J","^K","^L","^M","^N","^O"]]],"~$->Note",["^ ","~:protocol-inline",null,"~:meta",["^ ","^Q","/home/porky/mecca-roms/resources/public/cljs-out/dev/music_theory/note.cljc","^V",3,"^T",12,"^X",3,"^R",16,"^U",true,"~:factory","~:positional","~:arglists",["~#list",["~$quote",["^16",[["~$number"]]]]],"~:doc","Positional factory function for music-theory.note/Note."],"^8","~$music-theory.note/->Note","~:variadic",false,"^Q","resources/public/cljs-out/dev/music_theory/note.cljc","^R",16,"~:method-params",["^16",[["^18"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^T",1,"^U",true,"^13","^14","^V",3,"^X",3,"~:max-fixed-arity",1,"~:fn-var",true,"^15",["^16",["^17",["^16",[["^18"]]]]],"^19","Positional factory function for music-theory.note/Note."],"~$map->Note",["^ ","^11",null,"^12",["^ ","^Q","/home/porky/mecca-roms/resources/public/cljs-out/dev/music_theory/note.cljc","^V",3,"^T",12,"^X",3,"^R",16,"^U",true,"^13","~:map","^15",["^16",["^17",["^16",[["~$G__14209"]]]]],"^19","Factory function for music-theory.note/Note, taking a map of keywords to field values."],"^8","~$music-theory.note/map->Note","^1;",false,"^Q","resources/public/cljs-out/dev/music_theory/note.cljc","^R",16,"^1<",["^16",[["^1C"]]],"^1=",null,"^1>",["^16",[null,null]],"^T",1,"^U",true,"^13","^1B","^V",3,"^X",3,"^1?",1,"^1@",true,"^15",["^16",["^17",["^16",[["^1C"]]]]],"^19","Factory function for music-theory.note/Note, taking a map of keywords to field values."],"~$intervals",["^ ","^8","~$music-theory.note/intervals","^Q","resources/public/cljs-out/dev/music_theory/note.cljc","^V",5,"^T",1,"^X",5,"^R",15,"^12",["^ ","^Q","/home/porky/mecca-roms/resources/public/cljs-out/dev/music_theory/note.cljc","^V",5,"^T",6,"^X",5,"^R",15],"^Y","^N"],"~$->note",["^ ","^11",null,"^12",["^ ","^Q","/home/porky/mecca-roms/resources/public/cljs-out/dev/music_theory/note.cljc","^V",9,"^T",7,"^X",9,"^R",13,"^15",["^16",["^17",["^16",[["~$x"]]]]],"^19","Creates a Note record, which represents a note as an unbounded MIDI note\n   number, from a string or keyword describing the note in scientific pitch\n   notation, i.e. a letter and (optionally) any number of sharps and flats.\n\n   e.g. C#5, Dbb4, E0"],"^8","~$music-theory.note/->note","^1;",false,"^Q","resources/public/cljs-out/dev/music_theory/note.cljc","^R",13,"^1<",["^16",[["~$x"]]],"^1=",null,"^1>",["^16",[null,null]],"^T",1,"^V",9,"^X",9,"^1?",1,"^1@",true,"^15",["^16",["^17",["^16",[["~$x"]]]]],"^19","Creates a Note record, which represents a note as an unbounded MIDI note\n   number, from a string or keyword describing the note in scientific pitch\n   notation, i.e. a letter and (optionally) any number of sharps and flats.\n\n   e.g. C#5, Dbb4, E0"],"~$note->midi",["^ ","^11",null,"^12",["^ ","^Q","/home/porky/mecca-roms/resources/public/cljs-out/dev/music_theory/note.cljc","^V",33,"^T",7,"^X",33,"^R",17,"^15",["^16",["^17",["^16",[["~$note"]]]]],"^19","Converts a note in the form of a string or keyword (e.g. C#4, :Db5, A2) into\n   the corresponding MIDI note number.\n\n   Throws an assertion error if the note is outside the range of MIDI notes\n   (0-127)."],"^8","~$music-theory.note/note->midi","^1;",false,"^Q","resources/public/cljs-out/dev/music_theory/note.cljc","^R",17,"^1<",["^16",[["^1J"]]],"^1=",null,"^1>",["^16",[null,null]],"^T",1,"^V",33,"^X",33,"^1?",1,"^1@",true,"^15",["^16",["^17",["^16",[["^1J"]]]]],"^19","Converts a note in the form of a string or keyword (e.g. C#4, :Db5, A2) into\n   the corresponding MIDI note number.\n\n   Throws an assertion error if the note is outside the range of MIDI notes\n   (0-127)."],"~$octave",["^ ","^11",null,"^12",["^ ","^Q","/home/porky/mecca-roms/resources/public/cljs-out/dev/music_theory/note.cljc","^V",43,"^T",7,"^X",43,"^R",13,"^15",["^16",["^17",["^16",[["^1J"]]]]],"^19","Returns the octave of a note."],"^8","~$music-theory.note/octave","^1;",false,"^Q","resources/public/cljs-out/dev/music_theory/note.cljc","^R",13,"^1<",["^16",[["^1J"]]],"^1=",null,"^1>",["^16",[null,null]],"^T",1,"^V",43,"^X",43,"^1?",1,"^1@",true,"^15",["^16",["^17",["^16",[["^1J"]]]]],"^19","Returns the octave of a note."],"~$note-position",["^ ","^11",null,"^12",["^ ","^Q","/home/porky/mecca-roms/resources/public/cljs-out/dev/music_theory/note.cljc","^V",55,"^T",7,"^X",55,"^R",20,"^15",["^16",["^17",["^16",[["~$tonic","^1J"]]]]],"^19","Given a tonic (e.g. A) and a note (e.g. C#), returns a number from 0-11\n   representing the position of the note (e.g. 4) relative to the tonic."],"^8","~$music-theory.note/note-position","^1;",false,"^Q","resources/public/cljs-out/dev/music_theory/note.cljc","^R",20,"^1<",["^16",[["^1O","^1J"]]],"^1=",null,"^1>",["^16",[null,null]],"^T",1,"^V",55,"^X",55,"^1?",2,"^1@",true,"^15",["^16",["^17",["^16",[["^1O","^1J"]]]]],"^19","Given a tonic (e.g. A) and a note (e.g. C#), returns a number from 0-11\n   representing the position of the note (e.g. 4) relative to the tonic."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^7",["~:number","^18"]],"~:order",["^1U","^18"]],"^19",null]