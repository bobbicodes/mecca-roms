["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$mantra.osc","~:imports",null,"~:requires",["^ ","~$t","~$mantra.time","^;","^;","~$s","~$mantra.sound","^<","^<","~$c","~$chronoid.core","^=","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$osc*",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","~:line",42,"~:column",7,"~:end-line",42,"~:end-column",11,"~:arglists",["~#list",["~$quote",["^J",[[["^ ","~:keys",["~$id","~$type","~$freq","~$context","~$clock"]]]]]]],"~:doc","Creates a one-off oscillator based on a map, hooks it up to a gain node,\n   and hooks the gain node up to the destination of the AudioContext.\n\n   Returns a map including the oscillator and gain nodes and the ID of the\n   oscillator model used as a blueprint."],"^7","~$mantra.osc/osc*","~:variadic",false,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",11,"~:method-params",["^J",[["~$p__16233"]]],"~:protocol-impl",null,"~:arglists-meta",["^J",[null,null]],"^F",1,"^E",42,"^G",42,"~:max-fixed-arity",1,"~:fn-var",true,"^I",["^J",["^K",["^J",[[["^ ","^L",["^M","^N","^O","^P","^Q"]]]]]]],"^R","Creates a one-off oscillator based on a map, hooks it up to a gain node,\n   and hooks the gain node up to the destination of the AudioContext.\n\n   Returns a map including the oscillator and gain nodes and the ID of the\n   oscillator model used as a blueprint."],"^O",["^ ","^B",null,"^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",75,"^F",7,"^G",75,"^H",11,"^I",["^J",["^K",["^J",[["~$osc-node","~$hz"]]]]]],"^7","~$mantra.osc/freq","^T",false,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",11,"^U",["^J",[["^[","^10"]]],"^W",null,"^X",["^J",[null,null]],"^F",1,"^E",75,"^G",75,"^Y",2,"^Z",true,"^I",["^J",["^K",["^J",[["^[","^10"]]]]]],"~$stop-osc",["^ ","^B",null,"^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",99,"^F",7,"^G",99,"^H",15,"^I",["^J",["^K",["^J",[["~$osc"]]]]],"^R","Silences and stops a currently playing oscillator.\n\n   This fn can take either an osc-model or an osc-impl as an argument."],"^7","~$mantra.osc/stop-osc","^T",false,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",15,"^U",["^J",[["^13"]]],"^W",null,"^X",["^J",[null,null]],"^F",1,"^E",99,"^G",99,"^Y",1,"^Z",true,"^I",["^J",["^K",["^J",[["^13"]]]]],"^R","Silences and stops a currently playing oscillator.\n\n   This fn can take either an osc-model or an osc-impl as an argument."],"~$silence",["^ ","^B",null,"^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",85,"^F",7,"^G",85,"^H",14,"^I",["^J",["^K",["^J",[["~$gain-node"]]]]]],"^7","~$mantra.osc/silence","^T",false,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",14,"^U",["^J",[["^16"]]],"^W",null,"^X",["^J",[null,null]],"^F",1,"^E",85,"^G",85,"^Y",1,"^Z",true,"^I",["^J",["^K",["^J",[["^16"]]]]]],"^13",["^ ","^B",null,"^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",6,"^F",7,"^G",6,"^H",10,"^I",["^J",["^K",["^J",[["~$&",["^ ","^L",["^N","^P","^Q"],"~:as","~$osc-map"]]]]]],"^R","Models the state of an oscillator.\n\n   e.g. (osc :type :square\n             :freq 440\n             :gain 0.5)\n\n   This produces a map that is used to create a fresh oscillator every time\n   one is needed. Because oscillators can only be started once, this\n   provides an abstraction for a 'persistent oscillator' that can be reused\n   any number of times (but under the hood, it's just a blueprint for any\n   number of oscillators).\n\n   :type, :freq and :gain are all optional.\n\n   :type defaults to a sine wave.\n\n   :freq and :gain are optional default values that, when present, are used\n   when playing notes that do not specify frequency/gain values. If left out,\n   they default to 440 Hz and 1.0 (full volume), respectively.\n\n   You can also supply your own AudioContext as :context, otherwise Mantra will\n   create and use its own AudioContext.\n\n   Similarly, you can supply your own chronoid clock as :clock, otherwise\n   Mantra will create one for you.","~:top-fn",["^ ","^T",true,"^Y",0,"^U",[["^J",[["^ ","^L",["^N","^P","^Q"],"^18","^19"]]]],"^I",["^J",[["~$&",["^ ","^L",["^N","^P","^Q"],"^18","^19"]]]],"^X",["^J",[null]]]],"^7","~$mantra.osc/osc","^T",true,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",10,"^1:",["^ ","^T",true,"^Y",0,"^U",[["^J",[["^ ","^L",["^N","^P","^Q"],"^18","^19"]]]],"^I",["^J",[["~$&",["^ ","^L",["^N","^P","^Q"],"^18","^19"]]]],"^X",["^J",[null]]],"^U",[["^J",[["^ ","^L",["^N","^P","^Q"],"^18","^19"]]]],"^W",null,"^X",["^J",[null]],"^F",1,"^E",6,"^G",6,"^Y",0,"^Z",true,"^I",["^J",[["~$&",["^ ","^L",["^N","^P","^Q"],"^18","^19"]]]],"^R","Models the state of an oscillator.\n\n   e.g. (osc :type :square\n             :freq 440\n             :gain 0.5)\n\n   This produces a map that is used to create a fresh oscillator every time\n   one is needed. Because oscillators can only be started once, this\n   provides an abstraction for a 'persistent oscillator' that can be reused\n   any number of times (but under the hood, it's just a blueprint for any\n   number of oscillators).\n\n   :type, :freq and :gain are all optional.\n\n   :type defaults to a sine wave.\n\n   :freq and :gain are optional default values that, when present, are used\n   when playing notes that do not specify frequency/gain values. If left out,\n   they default to 440 Hz and 1.0 (full volume), respectively.\n\n   You can also supply your own AudioContext as :context, otherwise Mantra will\n   create and use its own AudioContext.\n\n   Similarly, you can supply your own chronoid clock as :clock, otherwise\n   Mantra will create one for you."],"~$silence-ramp",["^ ","^B",null,"^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",88,"^F",7,"^G",88,"^H",19,"^I",["^J",["^K",["^J",[["^16"]]]]]],"^7","~$mantra.osc/silence-ramp","^T",false,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",19,"^U",["^J",[["^16"]]],"^W",null,"^X",["^J",[null,null]],"^F",1,"^E",88,"^G",88,"^Y",1,"^Z",true,"^I",["^J",["^K",["^J",[["^16"]]]]]],"~$gain-ramp",["^ ","^B",null,"^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",81,"^F",7,"^G",81,"^H",16,"^I",["^J",["^K",["^J",[["^16","~$level"]]]]]],"^7","~$mantra.osc/gain-ramp","^T",false,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",16,"^U",["^J",[["^16","^1?"]]],"^W",null,"^X",["^J",[null,null]],"^F",1,"^E",81,"^G",81,"^Y",2,"^Z",true,"^I",["^J",["^K",["^J",[["^16","^1?"]]]]]],"~$*oscillators*",["^ ","^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",71,"^F",3,"^G",71,"^H",16,"^R","A set of currently active oscillators. Each oscillator is represented as a\n     map containing:\n\n     :osc-node  -- the oscillator node :gain-node -- the gain node it's\n     connected to :model-id  -- the ID of the model that was used as a blueprint\n     to create the oscillator","~:dynamic",true],"^7","~$mantra.osc/*oscillators*","^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",16,"^F",1,"^1B",true,"^E",62,"^G",71,"~:tag","~$any","^R","A set of currently active oscillators. Each oscillator is represented as a\n     map containing:\n\n     :osc-node  -- the oscillator node :gain-node -- the gain node it's\n     connected to :model-id  -- the ID of the model that was used as a blueprint\n     to create the oscillator"],"~$start-osc",["^ ","^B",null,"^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",93,"^F",7,"^G",93,"^H",16,"^I",["^J",["^K",["^J",[[["^ ","^L",["^["],"^18","~$osc-impl"]]]]]],"^R","Start an oscillator and add it to *oscillators*."],"^7","~$mantra.osc/start-osc","^T",false,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",16,"^U",["^J",[["~$p__16236"]]],"^W",null,"^X",["^J",[null,null]],"^F",1,"^E",93,"^G",93,"^Y",1,"^Z",true,"^I",["^J",["^K",["^J",[[["^ ","^L",["^["],"^18","^1G"]]]]]],"^R","Start an oscillator and add it to *oscillators*."],"~$stop-all-oscs",["^ ","^B",null,"^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",118,"^F",7,"^G",118,"^H",20,"^I",["^J",["^K",["^J",[[]]]]],"^R","Silences and stops all currently playing oscillators."],"^7","~$mantra.osc/stop-all-oscs","^T",false,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",20,"^U",["^J",[[]]],"^W",null,"^X",["^J",[null,null]],"^F",1,"^E",118,"^G",118,"^Y",0,"^Z",true,"^I",["^J",["^K",["^J",[[]]]]],"^R","Silences and stops all currently playing oscillators."],"~$gain",["^ ","^B",null,"^C",["^ ","^D","/home/porky/mecca-roms/resources/public/cljs-out/dev/mantra/osc.cljs","^E",78,"^F",7,"^G",78,"^H",11,"^I",["^J",["^K",["^J",[["^16","^1?"]]]]]],"^7","~$mantra.osc/gain","^T",false,"^D","resources/public/cljs-out/dev/mantra/osc.cljs","^H",11,"^U",["^J",[["^16","^1?"]]],"^W",null,"^X",["^J",[null,null]],"^F",1,"^E",78,"^G",78,"^Y",2,"^Z",true,"^I",["^J",["^K",["^J",[["^16","^1?"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:model-id","~:freq","~:gain-node","~:type","~:id","~:osc-node","~:sine","~:context","~:clock"]],"~:order",["^1U","^1Y","^1Z","^1X","^1V","^1S","^1W","^1T","^1R"]],"^R",null]