["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$leipzig.melody","~:imports",null,"~:requires",["^ ","~$scale","~$leipzig.scale","^<","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$mapthen",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","~:line",122,"~:column",7,"~:end-line",122,"~:end-column",14,"~:arglists",["~#list",["~$quote",["^I",[["~$f","~$&","~$melodies"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",1,"~:method-params",[["^I",["~$f","^K"]]],"^H",["^I",[["~$f","~$&","^K"]]],"~:arglists-meta",["^I",[null]]]],"^7","~$leipzig.melody/mapthen","^M",true,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",14,"^L",["^ ","^M",true,"^N",1,"^O",[["^I",["~$f","^K"]]],"^H",["^I",[["~$f","~$&","^K"]]],"^P",["^I",[null]]],"^O",[["^I",["~$f","^K"]]],"~:protocol-impl",null,"^P",["^I",[null]],"^E",1,"^D",122,"^F",122,"^N",1,"~:fn-var",true,"^H",["^I",[["~$f","~$&","^K"]]]],"~$tempo",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",137,"^E",7,"^F",137,"^G",12,"^H",["^I",["^J",["^I",[["~$timing","~$notes"]]]]],"~:doc","Transform both :time and :duration according to timing.\n  e.g. (->> notes (tempo (bpm 120)))"],"^7","~$leipzig.melody/tempo","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",12,"^O",["^I",[["^U","^V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",137,"^F",137,"^N",2,"^S",true,"^H",["^I",["^J",["^I",[["^U","^V"]]]]],"^W","Transform both :time and :duration according to timing.\n  e.g. (->> notes (tempo (bpm 120)))"],"~$bpm",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",4,"^E",7,"^F",4,"^G",10,"^H",["^I",["^J",["^I",[["~$beats"]]]]],"^W","Returns a function that translates a beat number into seconds.\n  e.g. ((bpm 90) 5)"],"^7","~$leipzig.melody/bpm","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",10,"^O",["^I",[["^Z"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",4,"^F",4,"^N",1,"^S",true,"^H",["^I",["^J",["^I",[["^Z"]]]]],"^W","Returns a function that translates a beat number into seconds.\n  e.g. ((bpm 90) 5)"],"~$but",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",90,"^E",7,"^F",90,"^G",10,"^H",["^I",["^J",["^I",[["~$start","~$end","~$variation","^V"]]]]],"^W","Replaces part of a melody with another.\n  e.g. (->> notes (but 2 4 variation))"],"^7","~$leipzig.melody/but","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",10,"^O",["^I",[["^11","^12","^13","^V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",90,"^F",90,"^N",4,"^S",true,"^H",["^I",["^J",["^I",[["^11","^12","^13","^V"]]]]],"^W","Replaces part of a melody with another.\n  e.g. (->> notes (but 2 4 variation))"],"~$having",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",9,"^E",7,"^F",9,"^G",13,"^H",["^I",["^J",["^I",[["~$k","~$values","^V"]]]]],"^W","Zips an arbitrary quality onto a melody.\n  e.g. (->> (rhythm [1 1/2]) (having :drum [:kick :snare]))"],"^7","~$leipzig.melody/having","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",13,"^O",["^I",[["~$k","^16","^V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",9,"^F",9,"^N",3,"^S",true,"^H",["^I",["^J",["^I",[["~$k","^16","^V"]]]]],"^W","Zips an arbitrary quality onto a melody.\n  e.g. (->> (rhythm [1 1/2]) (having :drum [:kick :snare]))"],"~$where",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",61,"^E",7,"^F",61,"^G",12,"^H",["^I",["^J",["^I",[["~$k","~$f","^V"]]]]],"^W","Applies f to the k key of each note in notes, ignoring missing keys.\n  e.g. (->> notes (where :time (bpm 90)))"],"^7","~$leipzig.melody/where","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",12,"^O",["^I",[["~$k","~$f","^V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",61,"^F",61,"^N",3,"^S",true,"^H",["^I",["^J",["^I",[["~$k","~$f","^V"]]]]],"^W","Applies f to the k key of each note in notes, ignoring missing keys.\n  e.g. (->> notes (where :time (bpm 90)))"],"~$is",["^ ","^7","~$leipzig.melody/is","^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^D",47,"^E",1,"^F",47,"^G",8,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",47,"^E",6,"^F",47,"^G",8],"^W","Synonym for constantly.\n  e.g. (->> notes (wherever (comp not :part), :part (is :bass)))"],"~$times",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",129,"^E",7,"^F",129,"^G",12,"^H",["^I",["^J",["^I",[["~$n","^V"]]]]],"^W","Repeats notes n times.\n  e.g. (->> bassline (times 4))"],"^7","~$leipzig.melody/times","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",12,"^O",["^I",[["~$n","^V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",129,"^F",129,"^N",2,"^S",true,"^H",["^I",["^J",["^I",[["~$n","^V"]]]]],"^W","Repeats notes n times.\n  e.g. (->> bassline (times 4))"],"~$duration",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",105,"^E",7,"^F",105,"^G",15,"^H",["^I",["^J",["^I",[["^V"]]]]],"^W","Returns the total duration of notes.\n  e.g. (->> melody duration)"],"^7","~$leipzig.melody/duration","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",15,"^O",["^I",[["^V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",105,"^F",105,"^N",1,"^S",true,"^H",["^I",["^J",["^I",[["^V"]]]]],"^W","Returns the total duration of notes.\n  e.g. (->> melody duration)"],"~$all",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",67,"^E",7,"^F",67,"^G",10,"^H",["^I",["^J",["^I",[["~$k","~$v","^V"]]]]],"^W","Sets a constant value for each note of a melody.\n  e.g. (->> notes (all :part :drum))"],"^7","~$leipzig.melody/all","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",10,"^O",["^I",[["~$k","~$v","^V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",67,"^F",67,"^N",3,"^S",true,"^H",["^I",["^J",["^I",[["~$k","~$v","^V"]]]]],"^W","Sets a constant value for each note of a melody.\n  e.g. (->> notes (all :part :drum))"],"~$utter",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",15,"^E",7,"^F",15,"^G",12,"^H",["^I",["^J",["^I",[["~$object","~$time","^1>","~$velocity"]]]]]],"^7","~$leipzig.melody/utter","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",12,"^O",["^I",[["^1C","^1D","^1>","^1E"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",15,"^F",15,"^N",4,"^S",true,"^H",["^I",["^J",["^I",[["^1C","^1D","^1>","^1E"]]]]]],"~$before?",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",78,"^E",8,"^F",78,"^G",15,"~:private",true,"^H",["^I",["^J",["^I",[["~$a","~$b"]]]]]],"^1H",true,"^7","~$leipzig.melody/before?","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",15,"^O",["^I",[["~$a","~$b"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",78,"^F",78,"^N",2,"^S",true,"^H",["^I",["^J",["^I",[["~$a","~$b"]]]]]],"~$if-applicable",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",52,"^E",8,"^F",52,"^G",21,"^1H",true,"^H",["^I",["^J",["^I",[["~$applies?","~$f"]]]]]],"^1H",true,"^7","~$leipzig.melody/if-applicable","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",21,"^O",["^I",[["^1K","~$f"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",52,"^F",52,"^N",2,"^S",true,"^H",["^I",["^J",["^I",[["^1K","~$f"]]]]]],"~$accelerando",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",148,"^E",7,"^F",148,"^G",18,"^H",["^I",["^J",["^I",[["~$from","~$to","~$by"]]]]],"^W","Linearly interpolated change between from and to.\n  e.g. (->> notes (tempo (accelerando 0 4 3/2))))"],"^7","~$leipzig.melody/accelerando","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",18,"^O",["^I",[["^1N","^1O","^1P"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",148,"^F",148,"^N",3,"^S",true,"^H",["^I",["^J",["^I",[["^1N","^1O","^1P"]]]]],"^W","Linearly interpolated change between from and to.\n  e.g. (->> notes (tempo (accelerando 0 4 3/2))))"],"~$after",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",73,"^E",7,"^F",73,"^G",12,"^H",["^I",["^J",["^I",[["~$wait","^V"]]]]],"^W","Delay notes by wait.\n  e.g. (->> melody (after 3))"],"^7","~$leipzig.melody/after","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",12,"^O",["^I",[["^1S","^V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",73,"^F",73,"^N",2,"^S",true,"^H",["^I",["^J",["^I",[["^1S","^V"]]]]],"^W","Delay notes by wait.\n  e.g. (->> melody (after 3))"],"~$phrase",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",22,"^E",7,"^F",22,"^G",13,"^H",["^I",["^J",["^I",[["~$durations","~$pitches","~$velocities"],["^1V","^1W"]]]]],"^W","Translates a sequence of durations and pitches into a melody.\n  nil pitches signify rests, vectors represent clusters, and maps\n  represent chords. Vector durations represent repeated notes.\n  e.g. (phrase [1/2 1/2 3/2 3/2] [0 1 nil 4])\n  (phrase [1 1 2] [4 3 [0 2]])\n  (phrase [1 [1 2]] [4 3])\n  (phrase (repeat 4) (map #(-> triad (root %))) [0 3 4 3])","^L",["^ ","^M",false,"^N",3,"^O",["^I",[["^1V","^1W","^1X"],["^1V","^1W"]]],"^H",["^I",[["^1V","^1W","^1X"],["^1V","^1W"]]],"^P",["^I",[null,null]]]],"^7","~$leipzig.melody/phrase","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",13,"^L",["^ ","^M",false,"^N",3,"^O",["^I",[["^1V","^1W","^1X"],["^1V","^1W"]]],"^H",["^I",[["^1V","^1W","^1X"],["^1V","^1W"]]],"^P",["^I",[null,null]]],"^O",["^I",[["^1V","^1W","^1X"],["^1V","^1W"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",22,"^F",22,"^N",3,"^S",true,"^H",["^I",[["^1V","^1W","^1X"],["^1V","^1W"]]],"^W","Translates a sequence of durations and pitches into a melody.\n  nil pitches signify rests, vectors represent clusters, and maps\n  represent chords. Vector durations represent repeated notes.\n  e.g. (phrase [1/2 1/2 3/2 3/2] [0 1 nil 4])\n  (phrase [1 1 2] [4 3 [0 2]])\n  (phrase [1 [1 2]] [4 3])\n  (phrase (repeat 4) (map #(-> triad (root %))) [0 3 4 3])"],"~$with",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",79,"^E",7,"^F",79,"^G",11,"^H",["^I",["^J",["^I",[[["~$a","~$&","~$other-as","~:as","~$as"],["~$b","~$&","~$other-bs","^20","~$bs"]],["^21","^23","~$&","~$others"]]]]],"^W","Blends melodies.\n  e.g. (->> melody (with bass drums))","^L",["^ ","^M",true,"^N",2,"^O",["^I",[[["~$a","~$&","^1[","^20","^21"],["~$b","~$&","^22","^20","^23"]]]],"^H",["^I",[[["~$a","~$&","^1[","^20","^21"],["~$b","~$&","^22","^20","^23"]],["^21","^23","~$&","^24"]]],"^P",["^I",[null,null]]]],"^7","~$leipzig.melody/with","^M",true,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",11,"^L",["^ ","^M",true,"^N",2,"^O",["^I",[[["~$a","~$&","^1[","^20","^21"],["~$b","~$&","^22","^20","^23"]]]],"^H",["^I",[[["~$a","~$&","^1[","^20","^21"],["~$b","~$&","^22","^20","^23"]],["^21","^23","~$&","^24"]]],"^P",["^I",[null,null]]],"^O",["^I",[[["~$a","~$&","^1[","^20","^21"],["~$b","~$&","^22","^20","^23"]]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",79,"^F",79,"^N",2,"^S",true,"^H",["^I",[[["~$a","~$&","^1[","^20","^21"],["~$b","~$&","^22","^20","^23"]],["^21","^23","~$&","^24"]]],"^W","Blends melodies.\n  e.g. (->> melody (with bass drums))"],"~$rhythm",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",41,"^E",7,"^F",41,"^G",13,"^H",["^I",["^J",["^I",[["^1V"]]]]],"^W","Translates a sequence of durations into a rhythm.\n  e.g. (rhythm [1 1 2])"],"^7","~$leipzig.melody/rhythm","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",13,"^O",["^I",[["^1V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",41,"^F",41,"^N",1,"^S",true,"^H",["^I",["^J",["^I",[["^1V"]]]]],"^W","Translates a sequence of durations into a rhythm.\n  e.g. (rhythm [1 1 2])"],"~$then",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",114,"^E",7,"^F",114,"^G",11,"^H",["^I",["^J",["^I",[["~$later","~$earlier"]]]]],"^W","Sequences later after earlier.\n  e.g. (->> call (then response))"],"^7","~$leipzig.melody/then","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",11,"^O",["^I",[["^29","^2:"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",114,"^F",114,"^N",2,"^S",true,"^H",["^I",["^J",["^I",[["^29","^2:"]]]]],"^W","Sequences later after earlier.\n  e.g. (->> call (then response))"],"~$wherever",["^ ","^A",null,"^B",["^ ","^C","/home/porky/mecca/resources/public/cljs-out/dev/leipzig/melody.cljc","^D",53,"^E",7,"^F",53,"^G",15,"^H",["^I",["^J",["^I",[["^1K","~$k","~$f","^V"]]]]],"^W","Applies f to the k key of each note wherever condition? returns true.\n  e.g. (->> notes (wherever (comp not :part), :part (is :piano))"],"^7","~$leipzig.melody/wherever","^M",false,"^C","resources/public/cljs-out/dev/leipzig/melody.cljc","^G",15,"^O",["^I",[["^1K","~$k","~$f","^V"]]],"^R",null,"^P",["^I",[null,null]],"^E",1,"^D",53,"^F",53,"^N",4,"^S",true,"^H",["^I",["^J",["^I",[["^1K","~$k","~$f","^V"]]]]],"^W","Applies f to the k key of each note wherever condition? returns true.\n  e.g. (->> notes (wherever (comp not :part), :part (is :piano))"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:time","~:pitch","~:duration","~:otherwise","~:velocity"]],"~:order",["^2C","^2B","^2D","^2F","^2E"]],"^W",null]