["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ ","~$console","~$re-frame.loggers","~$empty-queue","~$re-frame.interop","~$debug-enabled?","^8"],"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:imports",null,"~:requires",["^ ","^6","^6","^8","^8","~$trace","~$re-frame.trace","^A","^A","~$set","~$clojure.set","^C","^C"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","^5","^6","^7","^8","^9","^8"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","~:line",43,"~:column",7,"~:end-line",43,"~:end-column",20,"~:arglists",["~#list",["~$quote",["^P",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",3,"~:method-params",[["^P",["^R","^S","~$f","^T"]]],"^O",["^P",[["^R","^S","~$f","~$&","^T"]]],"~:arglists-meta",["^P",[null]]]],"^<","~$re-frame.interceptor/update-effect","^V",true,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",20,"^U",["^ ","^V",true,"^W",3,"^X",[["^P",["^R","^S","~$f","^T"]]],"^O",["^P",[["^R","^S","~$f","~$&","^T"]]],"^Y",["^P",[null]]],"^X",[["^P",["^R","^S","~$f","^T"]]],"~:protocol-impl",null,"^Y",["^P",[null]],"^L",1,"^K",43,"^M",43,"^W",3,"~:fn-var",true,"^O",["^P",[["^R","^S","~$f","~$&","^T"]]]],"~$invoke-interceptors",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",75,"^L",8,"^M",75,"^N",27,"~:private",true,"^O",["^P",["^Q",["^P",[["^R","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^12",true,"^<","~$re-frame.interceptor/invoke-interceptors","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",27,"^X",["^P",[["^R","^13"]]],"^[",null,"^Y",["^P",[null,null]],"^L",1,"^K",75,"^M",75,"^W",2,"^10",true,"^O",["^P",["^Q",["^P",[["^R","^13"]]]]],"^14","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while it's `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",57,"^L",7,"^M",57,"^N",21,"^O",["^P",["^Q",["^P",[["^R","^S","~$value"]]]]]],"^<","~$re-frame.interceptor/assoc-coeffect","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",21,"^X",["^P",[["^R","^S","^17"]]],"^[",null,"^Y",["^P",[null,null]],"^L",1,"^K",57,"^M",57,"^W",3,"^10",true,"^O",["^P",["^Q",["^P",[["^R","^S","^17"]]]]]],"~$update-coeffect",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",61,"^L",7,"^M",61,"^N",22,"^O",["^P",["^Q",["^P",[["^R","^S","~$f","~$&","^T"]]]]],"^U",["^ ","^V",true,"^W",3,"^X",[["^P",["^R","^S","~$f","^T"]]],"^O",["^P",[["^R","^S","~$f","~$&","^T"]]],"^Y",["^P",[null]]]],"^<","~$re-frame.interceptor/update-coeffect","^V",true,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",22,"^U",["^ ","^V",true,"^W",3,"^X",[["^P",["^R","^S","~$f","^T"]]],"^O",["^P",[["^R","^S","~$f","~$&","^T"]]],"^Y",["^P",[null]]],"^X",[["^P",["^R","^S","~$f","^T"]]],"^[",null,"^Y",["^P",[null]],"^L",1,"^K",61,"^M",61,"^W",3,"^10",true,"^O",["^P",[["^R","^S","~$f","~$&","^T"]]]],"~$invoke-interceptor-fn",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",68,"^L",8,"^M",68,"^N",29,"^12",true,"^O",["^P",["^Q",["^P",[["^R","~$interceptor","^13"]]]]]],"^12",true,"^<","~$re-frame.interceptor/invoke-interceptor-fn","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",29,"^X",["^P",[["^R","^1<","^13"]]],"^[",null,"^Y",["^P",[null,null]],"^L",1,"^K",68,"^M",68,"^W",3,"^10",true,"^O",["^P",["^Q",["^P",[["^R","^1<","^13"]]]]]],"~$get-effect",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",31,"^L",7,"^M",31,"^N",17,"^O",["^P",["^Q",["^P",[["^R"],["^R","^S"],["^R","^S","~$not-found"]]]]],"^U",["^ ","^V",false,"^W",3,"^X",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^O",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^Y",["^P",[null,null,null]]]],"^<","~$re-frame.interceptor/get-effect","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",17,"^U",["^ ","^V",false,"^W",3,"^X",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^O",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^Y",["^P",[null,null,null]]],"^X",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^[",null,"^Y",["^P",[null,null,null]],"^L",1,"^K",31,"^M",31,"^W",3,"^10",true,"^O",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]]],"~$->interceptor",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",17,"^L",7,"^M",17,"^N",20,"^O",["^P",["^Q",["^P",[["~$&",["^ ","~:as","~$m","~:keys",["~$id","~$before","~$after"]]]]]]],"^14","Create an interceptor from named arguments","^U",["^ ","^V",true,"^W",0,"^X",[["^P",[["^ ","^1B","~$m","^1C",["^1D","^1E","^1F"]]]]],"^O",["^P",[["~$&",["^ ","^1B","~$m","^1C",["^1D","^1E","^1F"]]]]],"^Y",["^P",[null]]]],"^<","~$re-frame.interceptor/->interceptor","^V",true,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",20,"^U",["^ ","^V",true,"^W",0,"^X",[["^P",[["^ ","^1B","~$m","^1C",["^1D","^1E","^1F"]]]]],"^O",["^P",[["~$&",["^ ","^1B","~$m","^1C",["^1D","^1E","^1F"]]]]],"^Y",["^P",[null]]],"^X",[["^P",[["^ ","^1B","~$m","^1C",["^1D","^1E","^1F"]]]]],"^[",null,"^Y",["^P",[null]],"^L",1,"^K",17,"^M",17,"^W",0,"^10",true,"^O",["^P",[["~$&",["^ ","^1B","~$m","^1C",["^1D","^1E","^1F"]]]]],"^14","Create an interceptor from named arguments"],"~$get-coeffect",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",49,"^L",7,"^M",49,"^N",19,"^O",["^P",["^Q",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]]]],"^U",["^ ","^V",false,"^W",3,"^X",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^O",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^Y",["^P",[null,null,null]]]],"^<","~$re-frame.interceptor/get-coeffect","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",19,"^U",["^ ","^V",false,"^W",3,"^X",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^O",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^Y",["^P",[null,null,null]]],"^X",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]],"^[",null,"^Y",["^P",[null,null,null]],"^L",1,"^K",49,"^M",49,"^W",3,"^10",true,"^O",["^P",[["^R"],["^R","^S"],["^R","^S","^1?"]]]],"~$execute",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",149,"^L",7,"^M",149,"^N",14,"^O",["^P",["^Q",["^P",[["~$event-v","~$interceptors"]]]]],"^14","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^<","~$re-frame.interceptor/execute","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",14,"^X",["^P",[["^1K","^1L"]]],"^[",null,"^Y",["^P",[null,null]],"^L",1,"^K",149,"^M",149,"^W",2,"^10",true,"^O",["^P",["^Q",["^P",[["^1K","^1L"]]]]],"^14","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of iterceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :dispatch  [:an-event-id :param1]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat anologous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",39,"^L",7,"^M",39,"^N",19,"^O",["^P",["^Q",["^P",[["^R","^S","^17"]]]]]],"^<","~$re-frame.interceptor/assoc-effect","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",19,"^X",["^P",[["^R","^S","^17"]]],"^[",null,"^Y",["^P",[null,null]],"^L",1,"^K",39,"^M",39,"^W",3,"^10",true,"^O",["^P",["^Q",["^P",[["^R","^S","^17"]]]]]],"~$enqueue",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",112,"^L",7,"^M",112,"^N",14,"^O",["^P",["^Q",["^P",[["^R","^1L"]]]]],"^14","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"^<","~$re-frame.interceptor/enqueue","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",14,"^X",["^P",[["^R","^1L"]]],"^[",null,"^Y",["^P",[null,null]],"^L",1,"^K",112,"^M",112,"^W",2,"^10",true,"^O",["^P",["^Q",["^P",[["^R","^1L"]]]]],"^14","Add a collection of `interceptors` to the end of `context's` execution `:queue`.\n  Returns the updated `context`.\n\n  In an advanced case, this function could allow an interceptor to add new\n  interceptors to the `:queue` of a context."],"~$mandatory-interceptor-keys",["^ ","^<","~$re-frame.interceptor/mandatory-interceptor-keys","^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",9,"^L",1,"^M",9,"^N",32,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",9,"^L",6,"^M",9,"^N",32],"~:tag","~$cljs.core/ISet"],"~$interceptor?",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",11,"^L",7,"^M",11,"^N",19,"^O",["^P",["^Q",["^P",[["~$m"]]]]]],"^<","~$re-frame.interceptor/interceptor?","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",19,"^X",["^P",[["~$m"]]],"^[",null,"^Y",["^P",[null,null]],"^L",1,"^K",11,"^M",11,"^W",1,"^10",true,"^O",["^P",["^Q",["^P",[["~$m"]]]]]],"~$change-direction",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",135,"^L",8,"^M",135,"^N",24,"^12",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^14","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^12",true,"^<","~$re-frame.interceptor/change-direction","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",24,"^X",["^P",[["^R"]]],"^[",null,"^Y",["^P",[null,null]],"^L",1,"^K",135,"^M",135,"^W",1,"^10",true,"^O",["^P",["^Q",["^P",[["^R"]]]]],"^14","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^R",["^ ","^H",null,"^I",["^ ","^J","/home/porky/mecca-nsf/resources/public/cljs-out/dev/re_frame/interceptor.cljc","^K",124,"^L",8,"^M",124,"^N",15,"^12",true,"^O",["^P",["^Q",["^P",[["~$event","^1L"],["^1Z","^1L","~$db"]]]]],"^14","Create a fresh context","^U",["^ ","^V",false,"^W",3,"^X",["^P",[["^1Z","^1L"],["^1Z","^1L","^1["]]],"^O",["^P",[["^1Z","^1L"],["^1Z","^1L","^1["]]],"^Y",["^P",[null,null]]]],"^12",true,"^<","~$re-frame.interceptor/context","^V",false,"^J","resources/public/cljs-out/dev/re_frame/interceptor.cljc","^N",15,"^U",["^ ","^V",false,"^W",3,"^X",["^P",[["^1Z","^1L"],["^1Z","^1L","^1["]]],"^O",["^P",[["^1Z","^1L"],["^1Z","^1L","^1["]]],"^Y",["^P",[null,null]]],"^X",["^P",[["^1Z","^1L"],["^1Z","^1L","^1["]]],"^[",null,"^Y",["^P",[null,null]],"^L",1,"^K",124,"^M",124,"^W",3,"^10",true,"^O",["^P",[["^1Z","^1L"],["^1Z","^1L","^1["]]],"^14","Create a fresh context"]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^@","^A","^A","^A"],"~:cljs.analyzer/constants",["^ ","~:seen",["^;",["~:unnamed","~:tags","~:db","~:queue","~:event","~:after","~:id","~:effects","~:stack","~:error","~:coeffects","~:interceptors","~:before"]],"~:order",["^2:","^2;","^2A","^2>","^25","^2<","^2?","^28","^2=","^29","^27","^26","^2@"]],"^14",null]